
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(7485)
> library(mstDIF)
> 
> # function to simulate 3PL data
> P3pl <- function(theta, a = rep(1, length(b)), b, c = rep(0, length(b)),
+                  generateResponses = FALSE, seed = 1){
+   nItem <- length(b)
+   nPerson <- length(theta)
+   A <- rep(1, nPerson) %o% a
+   B <- rep(1, nPerson) %o% b
+   C <- rep(1, nPerson) %o% c
+   Theta <- theta %o% rep(1, nItem)
+ 
+   Theta_B <- Theta - B
+   P <- C + (1 - C) * (1 + exp(- A * Theta_B))^(-1)
+   if(generateResponses){
+     set.seed(seed)
+     resp <- (P > matrix(runif(nPerson * nItem),
+                         ncol = nItem, nrow = nPerson)) * 1
+     return(resp)
+   } else (return(P))
+ }
> 
> # item parameters
> b <- seq(-2, 1.8, length.out = 3)
> a <- runif(length(b), 1, 1.5)
> c <- rep(0, length(b))
> 
> # person parameters
> nPerson <- 20
> theta <- rnorm(nPerson)
> 
> # generate responses
> resp <- P3pl(theta, a, b, generateResponses = TRUE)
> 
> # create orders
> metric <- rnorm(nPerson)
> factor <- factor(sample(1:3, size = nPerson, replace = TRUE))
> order <- ordered(sample(1:3, size = nPerson, replace = TRUE))
> 
> # compute scores
> scores <- mstDIF:::get_scores(resp, a, b, c, theta,
+                      slope_intercept = FALSE, return_terms = TRUE)
> scores
$scores
             [,1]        [,2]        [,3]         [,4]       [,5]        [,6]
 [1,]  0.08067638 -0.62649563  0.24657705 -0.036703652  0.7449415  0.27033347
 [2,]  0.16501978 -0.03692435  0.19485319 -0.114015658 -0.5409756  0.11082813
 [3,]  0.18659514  0.12476587  0.17267403 -0.146842554  0.4421394  0.08822442
 [4,] -1.39433007 -0.18447526  0.17042092  1.112959984 -0.6070837  0.08618477
 [5,]  0.20013850 -0.27744975  0.15721652 -0.174500858 -0.6420538  0.07498177
 [6,] -1.49276798 -0.12685681  0.17940170  1.127409004 -0.5830772  0.09456707
 [7,]  0.05767569  0.26684998 -0.43698291 -0.023122445 -0.2223947 -0.75578794
 [8,]  0.10086100  0.21152078  0.24590087 -0.050732189 -0.3605148  0.21406458
 [9,]  0.07542941 -0.69685729  0.24328117 -0.033390833  0.7617525  0.28843734
[10,]  0.20579016  0.26677022  0.09385286 -0.365526169  0.2341369  0.03406880
[11,]  0.17897753  0.09492345  0.18074277 -0.134095428  0.4637526  0.09587963
[12,]  0.03006508  0.22735937 -0.01523517 -0.009918839 -0.1228966  0.57000522
[13,]  0.10344572  0.20503797  0.24480711 -0.052686432 -0.3682295  0.20807348
[14,]  0.18943449 -0.19012570  0.16957501 -0.152024028 -0.6093335  0.08542931
[15,]  0.13130928 -0.15438218 -1.40335485 -0.076431860  0.5947965 -0.96574010
[16,]  0.14944037 -0.04442447 -1.60513326 -0.095122712  0.5447432 -0.99157825
[17,] -0.12087965  0.24766867  0.06316927  0.716367110  0.1531748  0.01974579
[18,] -3.31652191  0.26117498  0.16580305  1.245789044 -0.1861328  0.42618079
[19,] -0.03794547  0.22342094  0.04974501 -0.660720470  0.1181596  0.01440207
[20,]  0.19194448  0.14456139  0.16678369 -0.156838398  0.4264757  0.08297505

$terms
$terms$P
           [,1]      [,2]       [,3]
 [1,] 0.9709520 0.7140775 0.24111570
 [2,] 0.9097658 0.4814378 0.09884977
 [3,] 0.8837860 0.4238210 0.07868909
 [4,] 0.8808178 0.4180686 0.07686988
 [5,] 0.8618967 0.3845474 0.06687771
 [6,] 0.8922531 0.4410805 0.08434622
 [7,] 0.9817005 0.7868194 0.32589798
 [8,] 0.9598496 0.6544218 0.19092838
 [9,] 0.9735739 0.7301920 0.25726290
[10,] 0.7107156 0.2244363 0.03038663
[11,] 0.8938743 0.4445387 0.08551691
[12,] 0.9921500 0.8821952 0.50839878
[13,] 0.9583029 0.6470268 0.18558480
[14,] 0.8796853 0.4159120 0.07619607
[15,] 0.9395104 0.5701533 0.13863756
[16,] 0.9247181 0.5221737 0.11559200
[17,] 0.5669466 0.1468285 0.01761165
[18,] 0.9859413 0.8215790 0.38011897
[19,] 0.4770932 0.1132641 0.01284549
[20,] 0.8758751 0.4088062 0.07400707

$terms$a
             [,1]        [,2]        [,3]
 [1,]  2.77734965  0.87734965 -1.02265035
 [2,]  1.82879474 -0.07120526 -1.97120526
 [3,]  1.60561656 -0.29438344 -2.19438344
 [4,]  1.58299481 -0.31700519 -2.21700519
 [5,]  1.44919395 -0.45080605 -2.35080605
 [6,]  1.67303205 -0.22696795 -2.12696795
 [7,]  3.15175551  1.25175551 -0.64824449
 [8,]  2.51207796  0.61207796 -1.28792204
 [9,]  2.85434800  0.95434800 -0.94565200
[10,]  0.71137661 -1.18862339 -3.08862339
[11,]  1.68646753 -0.21353247 -2.11353247
[12,]  3.82996697  1.92996697  0.02996697
[13,]  2.48088814  0.58088814 -1.31911186
[14,]  1.57449133 -0.32550867 -2.22550867
[15,]  2.17077311  0.27077311 -1.62922689
[16,]  1.98507604  0.08507604 -1.81492396
[17,]  0.21321169 -1.68678831 -3.58678831
[18,]  3.36381274  1.46381274 -0.43618726
[19,] -0.07256642 -1.97256642 -3.87256642
[20,]  1.54638164 -0.35361836 -2.25361836

$terms$b
           [,1]      [,2]      [,3]
 [1,] -1.263553 -1.043222 -1.121177
 [2,] -1.263553 -1.043222 -1.121177
 [3,] -1.263553 -1.043222 -1.121177
 [4,] -1.263553 -1.043222 -1.121177
 [5,] -1.263553 -1.043222 -1.121177
 [6,] -1.263553 -1.043222 -1.121177
 [7,] -1.263553 -1.043222 -1.121177
 [8,] -1.263553 -1.043222 -1.121177
 [9,] -1.263553 -1.043222 -1.121177
[10,] -1.263553 -1.043222 -1.121177
[11,] -1.263553 -1.043222 -1.121177
[12,] -1.263553 -1.043222 -1.121177
[13,] -1.263553 -1.043222 -1.121177
[14,] -1.263553 -1.043222 -1.121177
[15,] -1.263553 -1.043222 -1.121177
[16,] -1.263553 -1.043222 -1.121177
[17,] -1.263553 -1.043222 -1.121177
[18,] -1.263553 -1.043222 -1.121177
[19,] -1.263553 -1.043222 -1.121177
[20,] -1.263553 -1.043222 -1.121177

$terms$c
          [,1]     [,2]      [,3]
 [1,] 1.029917 1.400408  4.147387
 [2,] 1.099184 2.077111 10.116361
 [3,] 1.131496 2.359487 12.708243
 [4,] 1.135309 2.391952 13.008997
 [5,] 1.160232 2.600460 14.952666
 [6,] 1.120758 2.267160 11.855896
 [7,] 1.018641 1.270940  3.068445
 [8,] 1.041830 1.528066  5.237566
 [9,] 1.027143 1.369503  3.887074
[10,] 1.407033 4.455608 32.909211
[11,] 1.118726 2.249523 11.693593
[12,] 1.007912 1.133536  1.966960
[13,] 1.043511 1.545531  5.388372
[14,] 1.136770 2.404355 13.124037
[15,] 1.064384 1.753914  7.213053
[16,] 1.081411 1.915071  8.651117
[17,] 1.763834 6.810665 56.780589
[18,] 1.014259 1.217168  2.630755
[19,] 2.096027 8.828924 77.848343
[20,] 1.141715 2.446147 13.512222


> 
> # compute process
> process <- apply(mstDIF:::scale_scores(scores$scores,
+                                         decorrelate = TRUE)[order(metric),],
+                  2, cumsum)
> process
               [,1]          [,2]          [,3]          [,4]          [,5]
 [1,]  8.540188e-02 -2.805339e-01  3.163055e-02 -1.656480e-01 -3.769761e-01
 [2,]  1.261493e-01 -3.117388e-01 -6.336873e-01 -1.829249e-01 -2.601938e-01
 [3,]  1.531447e-01 -4.272784e-01 -1.139942e+00 -2.002280e-01 -1.022574e-01
 [4,] -4.868856e-02 -5.535830e-01 -1.061413e+00  1.848477e-01 -3.024033e-01
 [5,] -8.873887e-03 -3.678303e-01 -9.696210e-01  1.550052e-01 -4.325221e-01
 [6,]  1.270176e-01 -1.656381e-01 -1.316621e+00  1.800736e-01 -5.188877e-01
 [7,]  2.155651e-01 -3.981370e-02 -1.147006e+00  1.570098e-01 -2.769393e-01
 [8,]  6.734980e-02  1.003591e-01 -1.057869e+00 -3.695576e-01 -2.526484e-01
 [9,]  1.704740e-01  3.432970e-02 -1.002261e+00 -4.668962e-01 -5.484017e-01
[10,]  2.848795e-01  1.966239e-01 -9.421691e-01 -4.932278e-01 -7.209035e-01
[11,]  1.155645e-01  2.412645e-02 -8.726071e-01 -9.713426e-02 -9.422677e-01
[12,]  3.521831e-01  3.096569e-01 -7.973129e-01  4.622691e-01 -7.925003e-01
[13,]  4.417065e-01  4.576204e-01 -6.320133e-01  4.322567e-01 -5.611824e-01
[14,]  5.344258e-01  2.547136e-01 -5.917573e-01  2.920666e-01 -9.108130e-01
[15,]  6.485660e-01  4.107355e-01 -5.299490e-01  2.635437e-01 -1.087991e+00
[16,]  6.897689e-01  6.389123e-01 -4.166057e-01  6.062257e-02 -9.779362e-01
[17,] -1.752609e-01  7.854652e-01 -4.400312e-01  6.707552e-02 -9.055512e-01
[18,] -8.540616e-02  9.478693e-01 -2.780732e-01  3.121200e-02 -6.821591e-01
[19,] -4.457030e-02  4.454418e-01 -1.452667e-01  1.395725e-02 -3.399528e-01
[20,] -3.122502e-16 -5.204170e-17  1.595946e-16  6.765422e-17  2.324529e-16
               [,6]
 [1,]  1.205584e-02
 [2,] -1.728478e-01
 [3,] -4.567645e-01
 [4,] -5.334833e-01
 [5,] -1.122241e+00
 [6,] -4.535553e-01
 [7,] -4.678085e-01
 [8,] -5.208796e-01
 [9,] -4.886483e-01
[10,] -3.727378e-01
[11,] -4.457694e-01
[12,] -4.492179e-01
[13,] -4.654609e-01
[14,] -4.478535e-01
[15,] -3.378574e-01
[16,] -3.634135e-01
[17,] -2.203960e-01
[18,] -2.378129e-01
[19,] -1.090300e-01
[20,]  1.700029e-16
> 
> # Compare with strucchange
> library(strucchange)
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: sandwich
> gefp <- gefp(x = scale(scores$scores, scale = FALSE), fit = NULL,
+              scores = function(x) {x}, order.by = metric)
> 
> # Is the cumsum score process the same?
> stopifnot(all((gefp$process[-1,] - process) < 1e-14))
> 
> # bootstrap vs sctest
> test_b <- bootstrap_sctest(resp = resp, a = a, b = b, nSample = 15,
+                          item_selection = 1,
+                          DIF_covariate = list(m1 = metric,
+                                          m2 = metric,
+                                          m3 = metric,
+                                          f = factor,
+                                          o1 = order,
+                                          o2 = order),
+                          statistic = c("auto", "CvM", "maxLM", "auto", "auto", "WDMo"),
+                          decorrelate = TRUE, theta = theta)
> test_b$p
         it1
m1 0.9333333
m2 0.9333333
m3 0.7333333
f  0.6000000
o1 0.9333333
o2 1.0000000
> test_b$statistic
         it1
m1 0.6897689
m2 0.1584582
m3 2.9966015
f  2.2581694
o1 0.9389809
o2 0.8137717
> sctest_m1 <- sctest(x = scale(scores$scores, scale = FALSE),
+                  scores = function(x) {x}, parm = c(1, 4), order.by = metric)
> sctest_m2 <- sctest(x = scale(scores$scores, scale = FALSE),
+                     scores = function(x) {x}, parm = c(1, 4), order.by = metric,
+                     functional = "CvM")
> sctest_m3 <- sctest(x = scale(scores$scores, scale = FALSE),
+                     scores = function(x) {x}, parm = c(1, 4), order.by = metric,
+                     functional = "maxLM")
> sctest_f <- sctest(x = scale(scores$scores, scale = FALSE),
+                    scores = function(x) {x}, parm = c(1, 4), order.by = factor,
+                    functional = "LMuo")
> sctest_o <- sctest(x = scale(scores$scores, scale = FALSE),
+                    scores = function(x) {x}, parm = c(1, 4), order.by = order,
+                    functional = "maxLMo")
> sctest_o2 <- sctest(x = scale(scores$scores, scale = FALSE),
+                    scores = function(x) {x}, parm = c(1, 4), order.by = order,
+                    functional = "WDMo")
> 
> # Are the test statistics the same
> stopifnot(all(test_b$statistic / rbind(sctest_m1$statistic,
+                                       sctest_m2$statistic,
+                                       sctest_m3$statistic,
+                                       sctest_f$statistic,
+                                       sctest_o$statistic,
+                                       sctest_o2$statistic) - 1 < 1e-14))
> 
> # permutation vs bootstrap
> test_p <- permutation_sctest(resp = resp, a = a, b = b, nSample = 15,
+                              item_selection = 1,
+                              DIF_covariate = list(m1 = metric,
+                                              m2 = metric,
+                                              m3 = metric,
+                                              f = factor,
+                                              o1 = order,
+                                              o2 = order),
+                              statistic = c("auto", "CvM", "maxLM", "auto", "auto", "WDMo"),
+                              decorrelate = TRUE, theta = theta)
> test_p$p
         it1
m1 0.9333333
m2 1.0000000
m3 1.0000000
f  0.6666667
o1 0.9333333
o2 0.9333333
> test_p$statistic
         it1
m1 0.6897689
m2 0.1584582
m3 2.9966015
f  2.2581694
o1 0.9389809
o2 0.8137717
> 
> # Are the test statistics the same
> stopifnot(all(test_b$statistic == test_p$statistic))
> 
> 
> 
> proc.time()
   user  system elapsed 
   1.68    0.10    1.78 
